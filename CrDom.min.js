(function (window, undefined) { function $(dom) { return new CrDom(dom); }; function CrDom(doms = '') { this.CrDom = "1.1.5"; this.dom = this.ifthis(doms); this.ObjectMethodStatus = { states: false, time: null, times: null, amount: 1, Astate: null }; this.txt = [null]; }; CrDom.prototype.ifthis = function (dom) { if (typeof dom === 'object') { return [dom]; } else if (typeof dom === 'string') { return [...document.querySelectorAll(dom)]; } }; function ergodic(value, fun) { for (let i of value) { fun(i) } }; function copyArr(arr) { let res = []; for (let i = 0; i < arr.length; i++) { res.push(arr[i]) }; return res }; CrDom.prototype.eq = function (value) { this.dom = this.dom.filter((item, index, self) => { return typeof value === 'number' ? index == value : self; }); return this; }; CrDom.prototype.css = function (style, value) { if (typeof style === "object") { for (let i in style) { ergodic(this.dom, function (k) { k.style[i] = style[i]; }) } } else if (typeof style === "string" && typeof value === "string") { ergodic(this.dom, function (k) { k.style[style] = value; }) }; return this; }; CrDom.prototype.on = function (event, Callback) { ergodic(this.dom, function (i) { i.addEventListener(event, Callback); }); return this; }; CrDom.prototype.addText = function (txt) { let temp = []; if (txt == undefined) { ergodic(this.dom, function (i) { temp.push(i.innerText); }); this.txt = copyArr(temp); } else { ergodic(this.dom, function (i) { temp.push(i.innerText = txt); }); this.txt = copyArr(temp); }; return this; }; CrDom.prototype.setClass = function (clas) { if (typeof clas === 'string') { ergodic(this.dom, function (i) { i.className = clas }) }; return this }; CrDom.prototype.addClass = function (clas) { if (typeof clas === 'string') { ergodic(this.dom, function (i) { i.classList.add(clas) }) }; return this }; CrDom.prototype.clearClass = function (clas) { if (typeof clas === 'string') { ergodic(this.dom, function (i) { i.classList.remove(clas) }) }; return this; }; CrDom.prototype.display = function (state) { if (state == undefined) { if (this.ObjectMethodStatus.states) { ergodic(this.dom, function (i) { i.style.display = 'block'; }); this.ObjectMethodStatus.states = false; } else { ergodic(this.dom, function (i) { i.style.display = 'none'; }); this.ObjectMethodStatus.states = true; } } else if (state) { ergodic(this.dom, function (i) { i.style.display = 'block'; }) } else { ergodic(this.dom, function (i) { i.style.display = 'none'; }) }; return this; }; CrDom.prototype.slowin = function (tim) { let _this = this; let temp = 100 - (this.ObjectMethodStatus.amount * 100); this.ObjectMethodStatus.amount = this.ObjectMethodStatus.amount != 1 ? this.ObjectMethodStatus.amount : 1; ergodic(this.dom, function (value) { value.style.opacity = _this.ObjectMethodStatus.amount; }); clearInterval(this.ObjectMethodStatus.time); this.ObjectMethodStatus.time = setInterval(function () { if (temp <= 100) { ergodic(_this.dom, function (value) { value.style.opacity = _this.ObjectMethodStatus.amount = (100 - temp) / 100; }); temp++; } else { clearInterval(_this.ObjectMethodStatus.time); ergodic(_this.dom, function (value) { value.style.display = 'none'; }) } }, (tim * 1000) / 100); return this; }; CrDom.prototype.slowou = function (tim, val) { if (val != undefined) this.ObjectMethodStatus.amount = val; let _this = this; let temp = this.ObjectMethodStatus.amount * 100; this.ObjectMethodStatus.amount = this.ObjectMethodStatus.amount != 0 ? this.ObjectMethodStatus.amount : 0; ergodic(_this.dom, function (value) { value.style.display = 'block'; value.style.opacity = _this.ObjectMethodStatus.amount; }); clearInterval(_this.ObjectMethodStatus.times); this.ObjectMethodStatus.times = setInterval(function () { if (temp <= 100) { ergodic(_this.dom, function (value) { value.style.opacity = _this.ObjectMethodStatus.amount = temp / 100; }); temp++; } else { clearInterval(_this.ObjectMethodStatus.times); } }, (tim * 1000) / 100); return this; }; CrDom.prototype.change = function (time, state = true) { this.ObjectMethodStatus.Astate = this.ObjectMethodStatus.Astate == null ? state : this.ObjectMethodStatus.Astate; if (this.ObjectMethodStatus.Astate) { this.slowin(time); this.ObjectMethodStatus.Astate = false; } else { this.slowou(time); this.ObjectMethodStatus.Astate = true; }; return this; }; CrDom.prototype.stop = function () { clearInterval(this.ObjectMethodStatus.time); clearInterval(this.ObjectMethodStatus.times); return this; }; CrDom.prototype.father = function () { var temp = []; ergodic(this.dom, function (value) { temp.push(value.parentNode); }); var num = []; for (let i = 0; i < temp.length; i++) { if (num.indexOf(temp[i]) == -1) { num.push(temp[i]); } }; this.dom = copyArr(num); return this; }; CrDom.prototype.brother = function () { let sonnode = []; ergodic(this.dom, function (value) { ergodic(value.parentNode.children, function (val) { sonnode.push(val) }) }); let temp = []; for (let k = 0; k < sonnode.length; k++) { if (this.dom.indexOf(sonnode[k]) == -1) { temp.push(sonnode[k]) } }; this.dom = copyArr(temp); return this; }; CrDom.prototype.son = function () { let temp = []; ergodic(this.dom, function (value) { for (let k of value.children) { temp.push(k) } }); this.dom = copyArr(temp); return this; }; CrDom.prototype.progeny = function (node) { let temp = []; ergodic(this.dom, function (value) { ergodic(value.querySelectorAll(node), function (val) { temp.push(val); }) }); this.dom = copyArr(temp); return this; }; CrDom.prototype.insert = function (value) { if (value instanceof Array) { this.dom = copyArr(value); } else if (value instanceof Object) { this.dom = [value]; }; return this; }; $.DataBroker = function (object, value, fun, state = false) { function ArrayBroker(arr, fun) { let newPrototype = Object.create(Array.prototype); let methods = ["push", "pop", "shift", "unshift", "reverse", "sort", "splice"]; methods.forEach(method => { newPrototype[method] = function (...args) { setTimeout(function () { fun(); }, 0); return Array.prototype[method].call(this, ...args); }; }); arr.__proto__ = newPrototype; for (let i = 0; i < arr.length; i++) { if (arr[i] instanceof Array) { ArrayBroker(arr[i], fun); } else if (arr[i] instanceof Object) { let temp = arr[i]; arr[i] = new Object(); $.DataBroker(arr[i], temp, fun); } } }; for (let i in value) { if (value[i] instanceof Array) { object[i] = [...value[i]]; ArrayBroker(object[i], fun); } else if (value[i] instanceof Object) { let obj = new Object(); object[i] = obj; $.DataBroker(object[i], value[i], fun); } else { Object.defineProperty(object, i, { enumerable: true, get() { return value[i]; }, set(val) { value[i] = val; fun(); } }); }; }; if (state) { fun(); }; }; $.CreateTable = function (dom, data, sort) { for (let d of dom.dom) { d.innerHTML = ""; }; for (let i = 0; i < data.length; i++) { let tr = document.createElement('tr'); if (sort instanceof Array) { for (let t = 0; t < sort.length; t++) { let td = document.createElement('td'); td.innerHTML = data[i][sort[t]]; tr.appendChild(td); }; } else { for (let j in data[i]) { let td = document.createElement('td'); td.innerHTML = data[i][j]; tr.appendChild(td); }; }; for (let k of dom.dom) { k.appendChild(tr); }; } }; window.$ = window.CrDom = $; })(window, undefined)