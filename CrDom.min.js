(function (window, undefined) { function $(dom) { return new CrDom(dom) }; function CrDom(doms = '') { this.CrDom = "1.1.6"; this.dom = this.ifthis(doms); this.ObjectMethodStatus = { states: false, time: null, times: null, amount: 1, Astate: null }; this.txt = []; this.nature = [] }; CrDom.prototype.ifthis = function (dom) { if (typeof dom === 'object') { return [dom] } else if (typeof dom === 'string') { return [...document.querySelectorAll(dom)] } else { console.error('"$()" 传入参数错误！！！') } }; function ergodic(value, fun) { for (let i of value) { fun(i) } }; function copyArr(arr) { let res = []; for (let i = 0; i < arr.length; i++) { res.push(arr[i]) }; return res }; CrDom.prototype.eq = function (value) { this.dom = this.dom.filter((item, index, self) => { return typeof value === 'number' ? index == value : self }); return this }; CrDom.prototype.css = function (style, value) { if (typeof style === "object") { for (let i in style) { ergodic(this.dom, function (k) { k.style[i] = style[i] }) } } else if (typeof style === "string" && typeof value === "string") { ergodic(this.dom, function (k) { k.style[style] = value }) } else { console.error('"css()" 传入参数错误！！！') }; return this }; CrDom.prototype.on = function (event, Callback) { ergodic(this.dom, function (i) { i.addEventListener(event, Callback) }); return this }; CrDom.prototype.addText = function (txt) { let temp = []; if (txt == undefined) { ergodic(this.dom, function (i) { temp.push(i.innerText) }); this.txt = copyArr(temp) } else if (typeof txt == 'string' || typeof txt === 'number') { ergodic(this.dom, function (i) { temp.push(i.innerText = txt) }); this.txt = copyArr(temp) } else { console.error('"addText()" 传入数据类型错误！！！') }; return this }; CrDom.prototype.setClass = function (clas) { if (typeof clas === 'string') { ergodic(this.dom, function (i) { i.className = clas }) } else { console.error('"setClass()" 传入参数错误！！！') }; return this }; CrDom.prototype.addClass = function (clas) { if (typeof clas === 'string') { ergodic(this.dom, function (i) { i.classList.add(clas) }) } else { console.error('"addClass()" 传入参数错误！！！') }; return this }; CrDom.prototype.clearClass = function (clas) { if (typeof clas === 'string') { ergodic(this.dom, function (i) { i.classList.remove(clas) }) } else { console.error('"clearClass()" 传入参数错误！！！') }; return this }; CrDom.prototype.addHTML = function (domtxt, txt) { var reg = /^<.*>$/, res = /script|SCRIPT/; if (typeof domtxt != 'string') { console.error('需要字符类型参数！！！') } else if (reg.test(domtxt)) { res.test(domtxt) ? console.error('不能添加script标签！！！') : ergodic(this.dom, function (i) { i.innerHTML = domtxt }) } else { res.test(domtxt) ? console.error('不能添加script标签！！！') : ergodic(this.dom, function (i) { let dom = document.createElement(domtxt); dom.innerText = txt; i.appendChild(dom) }) }; return this }; CrDom.prototype.display = function (state) { if (state == undefined) { if (this.ObjectMethodStatus.states) { ergodic(this.dom, function (i) { i.style.display = 'block' }); this.ObjectMethodStatus.states = false } else { ergodic(this.dom, function (i) { i.style.display = 'none' }); this.ObjectMethodStatus.states = true } } else if (state) { ergodic(this.dom, function (i) { i.style.display = 'block' }) } else { ergodic(this.dom, function (i) { i.style.display = 'none' }) }; return this }; CrDom.prototype.slowin = function (tim) { let _this = this; let temp = 100 - (this.ObjectMethodStatus.amount * 100); this.ObjectMethodStatus.amount = this.ObjectMethodStatus.amount != 1 ? this.ObjectMethodStatus.amount : 1; ergodic(this.dom, function (value) { value.style.opacity = _this.ObjectMethodStatus.amount }); clearInterval(this.ObjectMethodStatus.time); this.ObjectMethodStatus.time = setInterval(function () { if (temp <= 100) { ergodic(_this.dom, function (value) { value.style.opacity = _this.ObjectMethodStatus.amount = (100 - temp) / 100 }); temp++ } else { clearInterval(_this.ObjectMethodStatus.time); ergodic(_this.dom, function (value) { value.style.display = 'none' }) } }, (tim * 1000) / 100); return this }; CrDom.prototype.slowou = function (tim, val) { if (val != undefined) this.ObjectMethodStatus.amount = val; let _this = this; let temp = this.ObjectMethodStatus.amount * 100; this.ObjectMethodStatus.amount = this.ObjectMethodStatus.amount != 0 ? this.ObjectMethodStatus.amount : 0; ergodic(_this.dom, function (value) { value.style.display = 'block'; value.style.opacity = _this.ObjectMethodStatus.amount }); clearInterval(_this.ObjectMethodStatus.times); this.ObjectMethodStatus.times = setInterval(function () { if (temp <= 100) { ergodic(_this.dom, function (value) { value.style.opacity = _this.ObjectMethodStatus.amount = temp / 100 }); temp++ } else { clearInterval(_this.ObjectMethodStatus.times) } }, (tim * 1000) / 100); return this }; CrDom.prototype.change = function (time, state = true) { this.ObjectMethodStatus.Astate = this.ObjectMethodStatus.Astate == null ? state : this.ObjectMethodStatus.Astate; if (this.ObjectMethodStatus.Astate) { this.slowin(time); this.ObjectMethodStatus.Astate = false } else { this.slowou(time); this.ObjectMethodStatus.Astate = true }; return this }; CrDom.prototype.stop = function () { clearInterval(this.ObjectMethodStatus.time); clearInterval(this.ObjectMethodStatus.times); return this }; CrDom.prototype.father = function () { var temp = []; ergodic(this.dom, function (value) { temp.push(value.parentNode) }); var num = []; for (let i = 0; i < temp.length; i++) { if (num.indexOf(temp[i]) == -1) { num.push(temp[i]) } }; this.dom = copyArr(num); return this }; CrDom.prototype.brother = function () { let sonnode = []; ergodic(this.dom, function (value) { ergodic(value.parentNode.children, function (val) { sonnode.push(val) }) }); let temp = []; for (let k = 0; k < sonnode.length; k++) { if (this.dom.indexOf(sonnode[k]) == -1) { temp.push(sonnode[k]) } }; this.dom = copyArr(temp); return this }; CrDom.prototype.son = function () { let temp = []; ergodic(this.dom, function (value) { for (let k of value.children) { temp.push(k) } }); this.dom = copyArr(temp); return this }; CrDom.prototype.progeny = function (node) { let temp = []; ergodic(this.dom, function (value) { ergodic(value.querySelectorAll(node), function (val) { temp.push(val) }) }); this.dom = copyArr(temp); return this }; CrDom.prototype.insert = function (value) { if (value instanceof Array) { this.dom = copyArr(value) } else if (value instanceof Object) { this.dom = [value] }; return this }; CrDom.prototype.Attr = function (attr, value) { let temp = []; if (typeof attr != 'string') { console.error('"Attr()" 传入参数一错误,应该是 string 类型 ！！！'); return this }; if (value == undefined) { ergodic(this.dom, function (i) { temp.push(i.attr ? i.attr : i.getAttribute(attr)) }) } else if (typeof value == 'string') { ergodic(this.dom, function (i) { i.setAttribute(attr, value); temp.push(i.getAttribute(attr)) }) } else if (value instanceof Array) { for (let i = 0; i < this.dom.length; i++) { this.dom[i].setAttribute(attr, value[i]); temp.push(this.dom[i].getAttribute(attr)) } } else { console.error('"Attr()" 传入参数二错误,应该是 string 类型 ！！！') }; this.nature = copyArr(temp); return this }; $.edition = '1.1.6'; $.DataBroker = function (object, value, fun, state = true) { let DataMonitor = function (d_object, d_value, d_fun) { function monitor(object, i, addobject) { Object.defineProperty(object, i, { enumerable: true, get() { return addobject }, set(val) { addobject = val; d_fun(i) } }) }; function ArrayBroker(arr, funs) { let newPrototype = Object.create(Array.prototype); let methods = ["push", "pop", "shift", "unshift", "reverse", "sort", "splice"]; methods.forEach(method => { newPrototype[method] = function (...args) { setTimeout(function () { funs(method) }, 0); return Array.prototype[method].call(this, ...args) } }); arr.__proto__ = newPrototype; for (let i = 0; i < arr.length; i++) { if (arr[i] instanceof Array) { ArrayBroker(arr[i], funs) } else if (arr[i] instanceof HTMLElement ? false : (arr[i] instanceof Object) && (typeof arr[i] == 'object')) { let temp = arr[i]; arr[i] = new Object(); arr[i].__proto__ = temp.__proto__; DataMonitor(arr[i], temp, funs) } } }; for (let i in d_value) { if (d_value.hasOwnProperty(i)) { if (d_value[i] instanceof Array) { monitor(d_object, i, [...d_value[i]]); ArrayBroker(d_object[i], d_fun) } else if (d_value[i] instanceof HTMLElement) { monitor(d_object, i, d_value[i]) } else if ((d_value[i] instanceof Object) && (typeof d_value[i] == 'object')) { monitor(d_object, i, new Object()); d_object[i].__proto__ = d_value[i].__proto__; DataMonitor(d_object[i], d_value[i], d_fun) } else { monitor(d_object, i, d_value[i]) } } } }; DataMonitor(object, value, fun); if (state) { fun() } }; $.DataView = function (dataname, data, container, state = false, date = 500) { let time = null; let containers = document.querySelector(container); let dom = [...containers.querySelectorAll(`[${dataname}]`)]; if (!containers.getAttribute('state')) { for (let k in data) { let son = [...containers.querySelectorAll(`[${k}]`)]; for (let i of son) { if (i.localName == 'input' || i.localName == 'textarea') { i.addEventListener('input', function () { if (state) { if (time !== null) { clearTimeout(time) }; time = setTimeout(() => { data[k] = i.value }, date) } else { data[k] = i.value } }); i.value = typeof data[k] == 'number' || typeof data[k] == 'string' ? data[k] : '' } else { i.innerText = typeof data[k] == 'number' || typeof data[k] == 'string' ? data[k] : '' } } }; containers.setAttribute('state', true) } else { for (let i of dom) { if (i.localName == 'input' || i.localName == 'textarea') { i.value = typeof data[dataname] == 'number' || typeof data[dataname] == 'string' ? data[dataname] : '' } else { i.innerText = typeof data[dataname] == 'number' || typeof data[dataname] == 'string' ? data[dataname] : '' } } } }; $.CreateTable = function (dom, data, sort) { for (let d of dom.dom) { d.innerHTML = "" }; for (let i = 0; i < data.length; i++) { let tr = document.createElement('tr'); if (sort instanceof Array) { for (let t = 0; t < sort.length; t++) { let td = document.createElement('td'); td.innerHTML = data[i][sort[t]]; tr.appendChild(td) } } else { for (let j in data[i]) { let td = document.createElement('td'); td.innerHTML = data[i][j]; tr.appendChild(td) } }; for (let k of dom.dom) { k.appendChild(tr) } } }; window.$ = window.CrDom = $; console.log('查看更多信息到:https://github.com/debfig/CrDom'); console.log(`%c CrDom.js%c v${this.$.edition}`, 'background: #35495e; padding: 2px; border-radius: 3px 0 0 3px; color: #fff;', 'background: #41b883; padding: 2px; border-radius: 0 3px 3px 0; color: #fff',) })(window, undefined)